params{
    //default values
    help = null
    inputdir = './'
    outdir= './'
    singleEnd=false
    skip_qc=false
    strand=false
    skip_multiqc=false
    without_replicate=false
    

    // run softare setting
    runMutect2=false
    runFacet=false 
    runADTex=false
    runstrelka=false
    runSequenza=false
    runQualimap=false
    runFreeC=false
    runFACET=false
    runMAFsummary=false
    runMSIsensor=false 
    runNGScheckmate=false
    rungatk4CNV=false

    // step function 
    MAF=false 
    

    // email  option 
    mail=false

}

process.cache = 'deep'

// set profiles
profiles {

    standard {
        includeConfig 'conf/base.config'
    }
    docker {
        docker.enabled = true
    }

    c2 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/C2.config'
    }
    c2hg38 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/C2hg38.config'
    }
    c2451 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/C2_451.config'
    }
    c1 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/C1.config'
    }
    s1 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/S1.config'
    }
    s2 {
        includeConfig 'conf/base.config'
        includeConfig 'conf/S2.config'
    }
    test {
        includeConfig 'conf/base.config'
        includeConfig 'conf/test.config'
    }
    debug { process.beforeScript = 'echo $HOSTNAME' }
    none {
        // Don't load any config (for use with custom home configs)
    }

}



// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


timeline {
    enabled = true
    file = "ExomePipe_timeline.html"
}
report {
    enabled = true
    file = "ExomePipe_report.html"
}
trace {
    enabled = true
    file = "ExomePipe_trace.txt"
}

manifest {
    name = 'ExomePipe'
    author = 'Qi Zhao<zhaoqi@sysucc.org.cn>'
    mainScript = 'ExomePipe.nf'
    nextflowVersion = '>=0.32.0'
    version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}